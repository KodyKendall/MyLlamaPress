<%# Loads in the Javascript <script> tags that are needed for the chatbot to function %>
<%= render partial: 'shared/llama_bot/javascript/dependencies' %> 

<%# Loads in the core javascript %>
<%= render partial: 'shared/llama_bot/javascript/core_javascript' %> 
<%= render partial: 'shared/llama_bot/javascript/images' %>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const element = document.getElementById('chatbotContainer');
    const resizers = document.querySelectorAll('#chatbotContainer .resizer');
    let originalWidth, originalHeight, originalX, originalY;
    let originalMouseX, originalMouseY;

    // Function to save chatbot size to localStorage (only width and height)
    function saveChatbotState() {
        const chatbotState = {
            width: element.style.width,
            height: element.style.height,
        };
        console.log('Saving chatbot state:', chatbotState);
        localStorage.setItem('chatbotState', JSON.stringify(chatbotState));
    }

    // Function to load chatbot state from localStorage
    function loadChatbotState() {
        const savedState = localStorage.getItem('chatbotState');
        if (savedState) {
            try {
                const { width, height } = JSON.parse(savedState);
                console.log('Loading chatbot state:', { width, height });
                // Apply the saved state
                element.style.width = width;
                element.style.height = height;
            } catch (error) {
                console.error('Error parsing chatbot state:', error);
                localStorage.removeItem('chatbotState');
            }
        }
    }

    // Initial load of chatbot state
    loadChatbotState();

    // Resizing functionality for dragging on the edges of the chatbot to resize the chatbot window size
    resizers.forEach(function (resizer) {
        resizer.addEventListener('mousedown', onMouseDown);

        function onMouseDown(e) {
            e.preventDefault();

            originalWidth = parseFloat(getComputedStyle(element).width);
            originalHeight = parseFloat(getComputedStyle(element).height);
            originalMouseX = e.pageX;
            originalMouseY = e.pageY;

            window.addEventListener('mousemove', onMouseMove);
            window.addEventListener('mouseup', onMouseUp);
        }

        function onMouseMove(e) {
          let deltaX = e.pageX - originalMouseX;
          let deltaY = e.pageY - originalMouseY;

          if (resizer.classList.contains('bottom-right')) {
              element.style.width = `${originalWidth + deltaX}px`;
              element.style.height = `${originalHeight + deltaY}px`;
          } else if (resizer.classList.contains('bottom-left')) {
              element.style.width = `${originalWidth - deltaX}px`;
              element.style.height = `${originalHeight + deltaY}px`;
          } else if (resizer.classList.contains('top-right')) {
              element.style.width = `${originalWidth + deltaX}px`;
              element.style.height = `${originalHeight - deltaY}px`;
          } else if (resizer.classList.contains('top-left')) {
              element.style.width = `${originalWidth - deltaX}px`;
              element.style.height = `${originalHeight - deltaY}px`;
          } else if (resizer.classList.contains('top')) {
              element.style.height = `${originalHeight - deltaY}px`;
          } else if (resizer.classList.contains('bottom')) {
              element.style.height = `${originalHeight + deltaY}px`;
          } else if (resizer.classList.contains('left')) {
              element.style.width = `${originalWidth - deltaX}px`;
          } else if (resizer.classList.contains('right')) {
              element.style.width = `${originalWidth + deltaX}px`;
          }

          // Set minimum width and height
          const minWidth = 300;
          const minHeight = 200;

          if (parseFloat(element.style.width) < minWidth) {
              element.style.width = `${minWidth}px`;
          }
          if (parseFloat(element.style.height) < minHeight) {
              element.style.height = `${minHeight}px`;
          }
        }

        function onMouseUp() {
            window.removeEventListener('mousemove', onMouseMove);
            window.removeEventListener('mouseup', onMouseUp);
            saveChatbotState();
        }
    });
});
</script>

<script>
// IMPORTANT! Don't move. We need the copyCode function outside of the DomContentLoad so that it's in the global scope. This is used when the LLM returns a code snippet for the user to copy -- mainly on pages/1/edit where you can view the code, but eventually we'll allow user to edit code on the show page as well.
/**
 * This method copies the code from the element with the given ID and then changes the text of the button to say "Copied!"
 * @param {string} elementId - The ID of the element containing the code to copy.
 */
  function copyCode(elementId) {
    const codeElement = document.getElementById(elementId);
    const textArea = document.createElement('textarea');
    textArea.value = codeElement.textContent;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    //TODO: This is a hack to find the copy button. We should use a data attribute to find it.
    let copyButton = codeElement.parentElement.parentElement.children[1];
    copyButton.textContent = 'Copied!';
    copyButton.classList.remove('bg-gray-200', 'hover:bg-gray-300');
    copyButton.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white', 'copy-animation');

    setTimeout(() => {
        copyButton.textContent = 'Copy';
        copyButton.classList.remove('bg-green-500', 'hover:bg-green-600', 'text-white', 'copy-animation');
        copyButton.classList.add('bg-gray-200', 'hover:bg-gray-300');
    }, 2000);
  }

    // Add this function at the end of the DOMContentLoaded event listener
    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.setAttribute('data-llama', 'exclude_when_saving_contenteditable_edits'); //Don't save these notifications to the page.
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.top = '10px';
        notification.style.right = '10px';
        notification.style.padding = '10px';
        notification.style.borderRadius = '5px';
        notification.style.zIndex = '1000';
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.3s ease-in-out';

        if (type === 'success') {
            notification.style.background = '#4CAF50';
            notification.style.color = 'white';
        } else if (type === 'error') {
            notification.style.background = '#F44336';
            notification.style.color = 'white';
        }

        document.body.appendChild(notification);

        // Fade in
        setTimeout(() => {
            notification.style.opacity = '1';
        }, 10);

        // Remove the notification after 3 seconds
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
    window.showNotification = showNotification; //make this global
</script>