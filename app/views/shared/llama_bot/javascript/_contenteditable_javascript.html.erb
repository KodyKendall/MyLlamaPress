<script data-llama="exclude_when_saving_contenteditable_edits">
document.addEventListener('DOMContentLoaded', () => {
    // Make the entire body editable, except for elements with the specific data-llama attribute
    document.body.contentEditable = true;

    // Find all elements with the data-llama attribute and make them non-editable
    const nonEditableElements = document.querySelectorAll('[data-llama*="exclude_when_saving_contenteditable_edits"]');
    nonEditableElements.forEach(element => {
        element.contentEditable = false;
    });

    let isEditing = false;
    let originalContent = '';
    let saveTimeout;
    let lastElementClicked = null;

    // Function to save changes
    function saveChanges(event) {
        console.log('Saving changes for element:', lastElementClicked);
        let currentContent = document.documentElement.outerHTML;
        // Only save if content has changed
        if (currentContent !== originalContent) {
            //see what node got edited -- check if it has the data-llama-snippet-id attribute, if it does, do an PUT to /snippets/:id with just the nodes of that snippet 
            if (lastElementClicked.hasAttribute('data-llama-snippet-id')) {
                saveSnippetChanges(lastElementClicked);
            } else {
                savePageChanges();
            }
        }
    }

    function saveSnippetChanges(element) {
        const snippetId = element.getAttribute('data-llama-snippet-id');
        let snippetElement = element;
        
        //Find parent snippet element
        while (snippetElement.parentElement && snippetElement.parentElement.hasAttribute('data-llama-snippet-id')) {
            snippetElement = snippetElement.parentElement;
        }
        const snippetContent = snippetElement.outerHTML;

        fetch(`/snippets/${snippetId}.json`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content: snippetContent }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Snippet save successful:', data);
            showNotification('Snippet changes saved successfully!', 'success');
        })
        .catch((error) => {
            console.error('Error saving snippet changes:', error);
            showNotification('Error saving snippet changes. Please try again.', 'error');
        });
    }

    function savePageChanges() {
        // Clone the entire document
        const clonedDoc = document.cloneNode(true);

        // Remove nodes that should be excluded
        const nodesToExclude = clonedDoc.querySelectorAll('[data-llama*="exclude_when_saving_contenteditable_edits"]');
        nodesToExclude.forEach(node => {
            node.remove();
        });

        // Find all nodes that are not marked as editable
        const nonEditableNodes = clonedDoc.querySelectorAll(':not([data-llama-editable="true"])');
        nonEditableNodes.forEach(node => {
            if (node.tagName !== 'HTML' && node.tagName !== 'BODY') {
                node.remove();
            }
        });

        // Clean up remaining nodes
        const editableNodes = clonedDoc.querySelectorAll('[data-llama-editable="true"]');
        editableNodes.forEach(node => {
            node.removeAttribute('data-llama-editable');
            node.removeAttribute('contenteditable');
        });

        // Remove 'selected-element' class from any nodes that have it
        const selectedElements = clonedDoc.querySelectorAll('.selected-element');
        selectedElements.forEach(element => {
            element.classList.remove('selected-element');
        });

        // Remove 'selected-element' class from any nodes that have it
        const selectionModeElements = clonedDoc.querySelectorAll('.selection-mode');
        selectionModeElements.forEach(element => {
            element.classList.remove('selection-mode');
        });

        // Get the cleaned HTML content
        let cleanedContent = clonedDoc.documentElement.outerHTML;

        // Remove the contenteditable attribute from the html page so it doesn't get saved to the database.
        cleanedContent = cleanedContent.replace(/\s*contenteditable="true"/g, '');

        // Use a more modern confirmation dialog
        //if (confirm('Save these changes?')) {
            // Show a loading indicator
            const loadingIndicator = document.createElement('div');
            loadingIndicator.setAttribute('data-llama', 'exclude_when_saving_contenteditable_edits'); //Don't save these notifications to the page.
            loadingIndicator.textContent = 'Saving...';
            loadingIndicator.style.position = 'fixed';
            loadingIndicator.style.top = '10px';
            loadingIndicator.style.right = '10px';
            loadingIndicator.style.padding = '10px';
            loadingIndicator.style.background = 'rgba(0,0,0,0.7)';
            loadingIndicator.style.color = 'white';
            loadingIndicator.style.borderRadius = '5px';
            document.body.appendChild(loadingIndicator);

            message = "Edit: " + lastElementClicked.innerHTML;

            fetch('/pages/<%= @page&.id %>.json', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content: cleanedContent, message: message }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Save successful:', data);
                originalContent = cleanedContent; // Update original content after successful save
                showNotification('Page changes saved successfully!', 'success');
            })
            .catch((error) => {
                console.error('Error saving changes:', error);
                showNotification('Error saving changes. Please try again.', 'error');
            })
            .finally(() => {
                // Remove the loading indicator
                document.body.removeChild(loadingIndicator);
            });
        //} else {
            //document.body.innerHTML = originalContent; // Revert to original content
            //  console.log('Changes discarded');
        //}
    }

    // Function to update Tailwind classes
    function updateTailwindClasses(img, width, height) {
        const widthClass = `w-${Math.round(width / 4) * 4}`;
        const heightClass = `h-${Math.round(height / 4) * 4}`;
        
        img.classList.forEach(className => {
            if (className.startsWith('w-')) img.classList.remove(className);
            if (className.startsWith('h-')) img.classList.remove(className);
        });
        
        img.classList.add(widthClass, heightClass);
    }

    // Image resizing functionality
    let isResizing = false;
    let currentImage = null;
    let startX, startY, startWidth, startHeight;
    let aspectRatio;

    document.body.addEventListener('mousedown', (e) => {
        lastElementClicked = e.target;
        console.log("lastElementClicked", lastElementClicked);
        if (e.target.tagName === 'IMG' && e.target.parentElement.id !== 'image-container' && !e.target.classList.contains('llama-prevent-img-resize')) {
            console.log("User is resizing image -- suppressing default behavior");
            isResizing = true;
            currentImage = e.target;
            startX = e.clientX;
            startY = e.clientY;
            startWidth = currentImage.clientWidth;
            startHeight = currentImage.clientHeight;
            aspectRatio = startWidth / startHeight;
            e.preventDefault();
        }
    });

    document.body.addEventListener('mousemove', (e) => {
        if (!isResizing) return;
        const width = startWidth + (e.clientX - startX);
        const height = width / aspectRatio;
        currentImage.style.width = `${width}px`;
        currentImage.style.height = `${height}px`;
        updateTailwindClasses(currentImage, width, height);
    });

    document.body.addEventListener('mouseup', () => {
        if (isResizing) {
            saveChanges(event);
        }
        isResizing = false;
        currentImage = null;
    });

    // Event listener for when editing starts
    document.body.addEventListener('focus', (event) => {
        
        const editableTarget = event.target.closest('[data-llama-editable="true"]');
        if (event.target.isContentEditable) {
            originalContent = document.body.innerHTML;
            isEditing = false;
            currentElementBeingEdited = event.target;
        }
    }, true);

    // Event listener for changes
    document.body.addEventListener('input', (event) => {
        if (event.target.isContentEditable) {
            isEditing = true;
            
            // Clear the existing timeout
            clearTimeout(saveTimeout);
            
            // Set a new timeout to save changes after 2 seconds of inactivity
            saveTimeout = setTimeout(saveChanges, 2000);
            currentElementBeingEdited = event.target;
        }
    }, true);

    // Event listener for when editing ends
    document.body.addEventListener('blur', (event) => {
        if (event.target.isContentEditable && isEditing) {
            clearTimeout(saveTimeout); // Clear any pending save
            saveChanges(event, currentElementBeingEdited); // Save immediately on blur
            isEditing = false;
            currentElementBeingEdited = null;
        }
    }, true);

    // Listen for page unload to save any unsaved changes
    window.addEventListener('beforeunload', (event) => {
        if (isEditing) {
            saveChanges(event);
            event.preventDefault(); // Cancel the event
            event.returnValue = ''; // Display a default message in most browsers
        }
    });

    /**
     * The following code is to ensure a better user experience when editing content editable nodes. 
     * 
     * When the user changes the content of a node, the browser
     * will sometimes merge, split, or otherwise change the node structure, resulting in new content that doesn't have the
     * data-llama-editable attribute. If we don't handle this carefully, we can end up with unsaved changes the user wanted 
     * to save. This code highlights those nodes so we can see them.
     * 
     * What's tricky is that we don't want to save HTML page changes injected from 3rd party sources such as plugins. 
     * 
     * We also don't want to save changes to nodes that are injected dynamically for LlamaBot such as the chat history, snippets, images, etc.
     * 
     * We have this debug mode to help us see what nodes are being edited, which ones won't be saved, etc. 
     * 
     * We also have this llamaChatHistoryLoaded event listener that fires when LlamaBot is fully loaded and is done with it's own dynamic Javascript things. 
     * 
     * We use the MutationObserver to watch for changes in the content editable nodes and add the data-llama-editable attribute
     * when we detect changes.
     * 
     * exclude_when_saving_contenteditable_edits provides a lot of protection from saving unintended changes, but it's not foolproof.
     */
    document.addEventListener('llamaChatHistoryLoaded', () => {

        const IN_DEBUG_MODE_FOR_CONTENT_EDITABLE_SAVING_NODES = false;

        // CSS class to highlight unsaved nodes
        const style = document.createElement('style');
        style.innerHTML = `
            .unsaved-highlight {
                background-color: rgba(255, 0, 0, 0.2); /* Light red background */
                outline: 2px solid red; /* Red border */
                position: relative;
            }
            .unsaved-highlight::after {
                content: 'This content won't be saved';
                color: white;
                background-color: red;
                position: absolute;
                top: -20px;
                left: 0;
                font-size: 10px;  // Changed from 12px to 10px
                padding: 2px 4px;
                border-radius: 3px;
                opacity: 0.8;
            }
        `;
        document.head.appendChild(style);

        

        // Helper function to highlight unsaved nodes
        function highlightUnsavedNode(node) {
            if (node.nodeType === Node.ELEMENT_NODE && !node.hasAttribute('data-llama-editable')) {
                node.classList.add('unsaved-highlight');
            }
        }

        // Helper function to add the data-llama-editable attribute to unsaved nodes
        function addDataLlamaEditableAttribute(node) { //Warning: this might pick up on unintended nodes injected by 3rd party sources.
            if (node.nodeType === Node.ELEMENT_NODE && !node.hasAttribute('data-llama-editable')) {
                node.setAttribute('data-llama-editable', 'true'); //if the node doesn't have the data-llama-editable attribute, add it.
            }
        }

        // MutationObserver callback to detect relevant changes
        const observerCallback = (mutations) => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    if (IN_DEBUG_MODE_FOR_CONTENT_EDITABLE_SAVING_NODES) {
                        highlightUnsavedNode(node);
                    }
                    else {
                        //highlightUnsavedNode(node);
                        addDataLlamaEditableAttribute(node);
                    }
                });

                if (mutation.type === 'characterData') {
                    const parent = mutation.target.parentElement;
                    if (parent && !parent.hasAttribute('data-llama-editable')) {
                        if (IN_DEBUG_MODE_FOR_CONTENT_EDITABLE_SAVING_NODES) {
                            highlightUnsavedNode(parent);
                        }
                        else {
                            //highlightUnsavedNode(node);
                            addDataLlamaEditableAttribute(parent);
                        }
                    }
                }
            });
        };

        // Start observing for changes in the editable content
        const observer = new MutationObserver(observerCallback);

        // Find the content element or fallback to body
        const contentElement = document.querySelector('#content') || document.body;

        // Start observing
        observer.observe(contentElement, {
            childList: true,
            subtree: true,
            characterData: true
        });
    });

});
</script>